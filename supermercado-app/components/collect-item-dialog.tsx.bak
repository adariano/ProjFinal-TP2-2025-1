"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import {
  CheckCircle,
  TrendingUp,
  TrendingDown,
  Calendar,
  MapPin,
  Camera,
  Upload,
  Users,
  Shield,
  Clock,
  DollarSign,
} from "lucide-react"

interface CollectItemDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  item: {
    id: number
    name: string
    quantity: number
    estimatedPrice?: number
    avgPrice?: number
    market?: string
    collected?: boolean
  } | null
  onItemCollected: (id: number, actualPrice: number, method: "manual" | "image") => void
  shoppingListId: number
}

type InputMethodType = "manual" | "image"

// Mock historical data com mais detalhes
const mockHistoricalData = {
  userHistory: [
    { date: "2024-12-15", price: 18.5, market: "Extra", location: "Shopping Center Norte" },
    { date: "2024-11-20", price: 17.9, market: "Carrefour", location: "Av. Paulista" },
    { date: "2024-10-25", price: 19.2, market: "Pão de Açúcar", location: "Rua Augusta" },
    { date: "2024-09-18", price: 16.8, market: "Atacadão", location: "Marginal Tietê" },
  ],
  communityHistory: [
    { date: "2024-12-18", price: 18.2, market: "Extra", user: "João S.", reliability: 95 },
    { date: "2024-12-17", price: 17.5, market: "Carrefour", user: "Maria L.", reliability: 88 },
    { date: "2024-12-16", price: 19.0, market: "Pão de Açúcar", user: "Carlos M.", reliability: 92 },
    { date: "2024-12-15", price: 16.5, market: "Atacadão", user: "Ana P.", reliability: 85 },
  ],
}

export default function CollectItemDialog({
  open,
  onOpenChange,
  item,
  onItemCollected,
  shoppingListId,
}: CollectItemDialogProps) {
  const [inputMethod, setInputMethod] = useState<InputMethodType>("manual")
  const [actualPrice, setActualPrice] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)
  const [showSuccess, setShowSuccess] = useState(false)
  const [imageFile, setImageFile] = useState<File | null>(null)
  const [previewUrl, setPreviewUrl] = useState<string | null>(null)

  const estimatedPriceRef = item?.estimatedPrice || item?.avgPrice || 0

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault()
    if (!item) return

    if (inputMethod === "manual" && !actualPrice) {
      alert("Por favor, insira o preço")
      return
    }

    onItemCollected(item.id, Number.parseFloat(actualPrice), inputMethod)
    handleSuccess()
  }

  const handleSuccess = () => {
    setShowSuccess(true)
    setTimeout(() => {
      setImageFile(null)
      setShowSuccess(false)
      onOpenChange(false)
    }, 2000)
  }

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setImageFile(file)
      setPreviewUrl(URL.createObjectURL(file))
      setIsProcessing(true)

      // Simular reconhecimento de imagem
      setTimeout(() => {
        // Simular um preço reconhecido da imagem
        const recognizedPrice = (Math.random() * (item?.avgPrice || 20) * 0.9).toFixed(2)
        setActualPrice(recognizedPrice)
        setIsProcessing(false)
      }, 1500)
    }
  }

  // Calculate averages and differences
  const averageUserPrice =
    mockHistoricalData.userHistory.length > 0
      ? mockHistoricalData.userHistory.reduce((sum, entry) => sum + entry.price, 0) /
        mockHistoricalData.userHistory.length
      : 0

  const priceDifference = actualPrice ? Number.parseFloat(actualPrice) - estimatedPriceRef : 0
  const userPriceDifference = actualPrice && averageUserPrice ? Number.parseFloat(actualPrice) - averageUserPrice : 0

  // Utility functions
  const getReliabilityColor = (reliability: number) => {
    if (reliability >= 90) return "text-green-600 bg-green-100"
    if (reliability >= 75) return "text-yellow-600 bg-yellow-100"
    return "text-red-600 bg-red-100"
  }

  const getReliabilityText = (reliability: number) => {
    if (reliability >= 90) return "Muito Confiável"
    if (reliability >= 75) return "Confiável"
    return "Pouco Confiável"
  }

  if (!item) return null

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Coletar Item</DialogTitle>
          <DialogDescription>
            Registre o preço encontrado para <span className="font-medium">{item.name}</span>
          </DialogDescription>
        </DialogHeader>

        {showSuccess ? (
          <div className="flex items-center justify-center py-8">
            <div className="text-center">
              <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
              <h3 className="text-lg font-medium text-green-600 mb-2">Item coletado com sucesso!</h3>
              <p className="text-sm text-gray-600">Redirecionando...</p>
            </div>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <div className="space-y-6">
              {/* Método de Entrada */}
              <div>
                <Label>Método de Coleta</Label>
                <Tabs value={inputMethod} onValueChange={(value) => setInputMethod(value as InputMethodType)}>
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="manual" className="flex items-center gap-2">
                      <DollarSign className="h-4 w-4" />
                      Manual
                    </TabsTrigger>
                    <TabsTrigger value="image" className="flex items-center gap-2">
                      <Camera className="h-4 w-4" />
                      Foto do Preço
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent value="manual">
                    <Card>
                      <CardContent className="pt-6">
                        <div className="space-y-4">
                          <div>
                            <Label htmlFor="price">Preço do Item</Label>
                            <div className="relative mt-1">
                              <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                              <Input
                                id="price"
                                type="number"
                                step="0.01"
                                min="0"
                                placeholder="0,00"
                                value={actualPrice}
                                onChange={(e) => setActualPrice(e.target.value)}
                                className="pl-10"
                              />
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>

                  <TabsContent value="image">
                    <Card>
                      <CardContent className="pt-6">
                        <div className="space-y-4">
                          <div className="flex items-center justify-center">
                            {imageFile ? (
                              <div className="relative">
                                {previewUrl && (
                                  <img
                                    src={previewUrl}
                                    alt="Preview"
                                    className="max-h-48 rounded-lg object-cover"
                                  />
                                )}
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  className="absolute -top-2 -right-2"
                                  onClick={() => {
                                    setImageFile(null)
                                    setPreviewUrl(null)
                                  }}
                                >
                                  <X className="h-4 w-4" />
                                </Button>
                              </div>
                            ) : (
                              <div className="flex flex-col items-center">
                                <div className="p-4 bg-gray-50 rounded-full mb-2">
                                  <Camera className="h-8 w-8 text-gray-400" />
                                </div>
                                <Label
                                  htmlFor="image-upload"
                                  className="cursor-pointer inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                                >
                                  <Upload className="h-4 w-4 mr-2" />
                                  Carregar Foto
                                </Label>
                                <input
                                  id="image-upload"
                                  type="file"
                                  accept="image/*"
                                  onChange={handleImageUpload}
                                  className="sr-only"
                                />
                              </div>
                            )}
                          </div>

                          {imageFile && (
                            <div>
                              {isProcessing ? (
                                <div className="text-center py-2">
                                  <Loader2 className="h-5 w-5 animate-spin mx-auto mb-2" />
                                  <p className="text-sm text-gray-600">Processando imagem...</p>
                                </div>
                              ) : (
                                <div>
                                  <Label htmlFor="recognized-price">Preço Reconhecido</Label>
                                  <div className="relative mt-1">
                                    <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                                    <Input
                                      id="recognized-price"
                                      type="number"
                                      step="0.01"
                                      min="0"
                                      value={actualPrice}
                                      onChange={(e) => setActualPrice(e.target.value)}
                                      className="pl-10"
                                    />
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </div>

              {/* Comparação de Preços */}
              <div className="space-y-4">
                <h3 className="text-sm font-medium">Análise de Preços</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Comparação com Estimativa */}
                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <div className="p-2 bg-blue-50 rounded-lg">
                          <TrendingUp className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <p className="text-sm font-medium mb-1">Comparação com Estimativa</p>
                          <p className="text-xs text-gray-600 mb-2">
                            Preço estimado: R$ {estimatedPriceRef.toFixed(2)}
                          </p>
                          {actualPrice && (
                            <Badge
                              variant="secondary"
                              className={
                                priceDifference < 0
                                  ? "bg-green-100 text-green-800"
                                  : priceDifference > 0
                                  ? "bg-red-100 text-red-800"
                                  : "bg-gray-100 text-gray-800"
                              }
                            >
                              {priceDifference < 0 ? (
                                <>
                                  <TrendingDown className="h-3 w-3 mr-1" />
                                  {Math.abs(priceDifference).toFixed(2)} abaixo
                                </>
                              ) : priceDifference > 0 ? (
                                <>
                                  <TrendingUp className="h-3 w-3 mr-1" />
                                  {priceDifference.toFixed(2)} acima
                                </>
                              ) : (
                                "Igual à estimativa"
                              )}
                            </Badge>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Histórico do Usuário */}
                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <div className="p-2 bg-purple-50 rounded-lg">
                          <Users className="h-5 w-5 text-purple-600" />
                        </div>
                        <div>
                          <p className="text-sm font-medium mb-1">Seu Histórico</p>
                          <p className="text-xs text-gray-600 mb-2">
                            Média anterior: R$ {averageUserPrice.toFixed(2)}
                          </p>
                          {actualPrice && averageUserPrice > 0 && (
                            <Badge
                              variant="secondary"
                              className={
                                userPriceDifference < 0
                                  ? "bg-green-100 text-green-800"
                                  : userPriceDifference > 0
                                  ? "bg-red-100 text-red-800"
                                  : "bg-gray-100 text-gray-800"
                              }
                            >
                              {userPriceDifference < 0 ? (
                                <>
                                  <TrendingDown className="h-3 w-3 mr-1" />
                                  {Math.abs(userPriceDifference).toFixed(2)} abaixo da sua média
                                </>
                              ) : userPriceDifference > 0 ? (
                                <>
                                  <TrendingUp className="h-3 w-3 mr-1" />
                                  {userPriceDifference.toFixed(2)} acima da sua média
                                </>
                              ) : (
                                "Igual à sua média"
                              )}
                            </Badge>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>

              {/* Históricos Detalhados */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-sm font-medium">Histórico de Preços</h3>
                  <Button variant="outline" size="sm" className="h-7">
                    <Clock className="h-3 w-3 mr-1" />
                    Ver mais
                  </Button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Histórico Pessoal */}
                  <Card>
                    <CardContent className="p-4">
                      <h4 className="text-sm font-medium mb-3 flex items-center gap-2">
                        <Calendar className="h-4 w-4 text-gray-400" />
                        Suas Compras Anteriores
                      </h4>
                      <div className="space-y-3">
                        {mockHistoricalData.userHistory.slice(0, 3).map((entry, index) => (
                          <div key={index} className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium">R$ {entry.price.toFixed(2)}</p>
                              <p className="text-xs text-gray-500 flex items-center gap-1">
                                <MapPin className="h-3 w-3" />
                                {entry.market}
                              </p>
                            </div>
                            <Badge variant="secondary" className="text-xs">
                              {entry.date}
                            </Badge>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Histórico da Comunidade */}
                  <Card>
                    <CardContent className="p-4">
                      <h4 className="text-sm font-medium mb-3 flex items-center gap-2">
                        <Users className="h-4 w-4 text-gray-400" />
                        Preços da Comunidade
                      </h4>
                      <div className="space-y-3">
                        {mockHistoricalData.communityHistory.slice(0, 3).map((entry, index) => (
                          <div key={index} className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium">R$ {entry.price.toFixed(2)}</p>
                              <div className="flex items-center gap-2">
                                <p className="text-xs text-gray-500">{entry.market}</p>
                                <Badge
                                  variant="secondary"
                                  className={`text-xs ${getReliabilityColor(entry.reliability)}`}
                                >
                                  <Shield className="h-3 w-3 mr-1" />
                                  {getReliabilityText(entry.reliability)}
                                </Badge>
                              </div>
                            </div>
                            <Badge variant="secondary" className="text-xs">
                              {entry.date}
                            </Badge>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>

              <div className="flex justify-end gap-4">
                <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                  Cancelar
                </Button>
                <Button type="submit" className="bg-green-600 hover:bg-green-700" disabled={isProcessing}>
                  {isProcessing ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Processando...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="h-4 w-4 mr-2" />
                      Confirmar Coleta
                    </>
                  )}
                </Button>
              </div>
            </div>
          </form>
        )}
      </DialogContent>
    </Dialog>
  )
}
