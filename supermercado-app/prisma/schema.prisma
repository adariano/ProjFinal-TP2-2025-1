// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  cpf            String          @unique
  password       String
  role           Role            @default(USER)
  points         Int             @default(0)
  createdAt      DateTime        @default(now())
  photoUrl       String?         // URL da foto de perfil
  shoppingLists  ShoppingList[]  @relation("UserShoppingLists")
  collectedItems ShoppingListItem[] @relation("UserCollectedItems")
  reviewedLists  ShoppingList[]    @relation("UserReviewedLists")
  priceReports   PriceReport[]     @relation("UserPriceReports")
  reviews        Review[]          @relation("UserReviews")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  category    String
  brand       String
  avgPrice    Float
  lastUpdate  DateTime  @default(now())
  items       ShoppingListItem[]
  priceReports PriceReport[]
}

model Market {
  id            Int      @id @default(autoincrement())
  name          String
  address       String
  distance      Float
  rating        Float
  phone         String?
  hours         String?
  googleMapsUrl String?
  priceLevel    String?
  categories    String?
  description   String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  priceReports  PriceReport[]
  reviews       Review[]
}

model ShoppingList {
  id              Int                  @id @default(autoincrement())
  name            String
  status          String               @default("active")
  createdAt       DateTime             @default(now())
  userId          Int
  estimatedTotal  Float?
  actualTotal     Float?
  reviewed        Boolean              @default(false)
  reviewedBy      Int?
  reviewedAt      DateTime?

  user            User                 @relation("UserShoppingLists", fields: [userId], references: [id])
  reviewer        User?                @relation("UserReviewedLists", fields: [reviewedBy], references: [id])
  items           ShoppingListItem[]
}

model ShoppingListItem {
  id            Int           @id @default(autoincrement())
  quantity      Int
  collected     Boolean       @default(false)
  productId     Int
  shoppingListId Int
  collectedBy   Int?
  collectedAt   DateTime?

  product       Product       @relation(fields: [productId], references: [id])
  shoppingList  ShoppingList  @relation(fields: [shoppingListId], references: [id])
  collector     User?         @relation("UserCollectedItems", fields: [collectedBy], references: [id])
}

model PriceReport {
  id          Int      @id @default(autoincrement())
  price       Float
  productId   Int
  marketId    Int
  userId      Int
  createdAt   DateTime @default(now())
  user        User     @relation("UserPriceReports", fields: [userId], references: [id])
  market      Market   @relation(fields: [marketId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([marketId])
  @@index([productId])
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Float
  comment     String?
  marketId    Int
  userId      Int
  createdAt   DateTime @default(now())
  user        User     @relation("UserReviews", fields: [userId], references: [id])
  market      Market   @relation(fields: [marketId], references: [id])

  @@index([userId])
  @@index([marketId])
}

enum Role {
  USER
  ADMIN
}
